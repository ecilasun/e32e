
// Memory wires
logic ifetch = 1'b0;			// I$/D$ select
addr_t addr = RESETVECTOR;		// Memory address
logic ren = 1'b0;				// Read enable
logic [3:0] wstrb = 4'h0;		// Write strobe
wire [31:0] din;				// Input to CPU
logic [31:0] dout;				// Output from CPU
wire wready, rready;			// Cache r/w state
logic ecall = 1'b0;				// SYSCALL
logic ebreak = 1'b0;			// BREAKPOINT
logic [2:0] dcacheop = 3'b000;	// Cache command

wire isuncached = addr[31];		// NOTE: anything at and above 0x80000000 is uncached memory
wire [7:0] cline = addr[13:6];	// Cache line, disregarding ifetch
wire [16:0] ctag = addr[30:14];	// Cache tag
wire [3:0] coffset = addr[5:2];	// Cache word offset

systemcache CACHE(
	.aclk(aclk),
	.aresetn(aresetn),
	// Cache address, decoded
	.uncached(isuncached),
	.line(cline),
	.tag(ctag),
	.offset(coffset),
	// From CPU
	.dcacheop(dcacheop),
	.ifetch(ifetch),
	.addr(addr),
	.din(dout),
	.dout(din),
	.wstrb(wstrb),
	.ren(ren),
	.wready(wready),
	.rready(rready),
	.a4buscached(a4buscached),
	.a4busuncached(a4busuncached) );

`ifdef ENABLEFPU
	typedef enum logic [3:0] {INIT, RETIRE, FETCH, EXECUTE, CPUFMSTALL, CPUFPUOP, CPUFSTALL, STOREWAIT, LOADWAIT, IMATHWAIT, INTERRUPTSETUP, INTERRUPTVALUE, INTERRUPTCAUSE, WFI} cpustatetype;
`else
	typedef enum logic [3:0] {INIT, RETIRE, FETCH, EXECUTE, STOREWAIT, LOADWAIT, IMATHWAIT, INTERRUPTSETUP, INTERRUPTVALUE, INTERRUPTCAUSE, WFI} cpustatetype;
`endif

cpustatetype cpustate = INIT;

logic [31:0] PC = RESETVECTOR;
logic [31:0] nextPC = RESETVECTOR;
logic [63:0] retired = 0;

wire [17:0] instrOneHotOut;
wire [3:0] aluop;
wire [2:0] bluop;
wire [2:0] func3;
wire [6:0] func7;
wire [11:0] func12;
wire [4:0] rs1, rs2, rs3, rd, csrindex;
wire [31:0] immed;
wire immsel, isrecordingform;

instructiondecoder DECODER(
	.aresetn(aresetn),
	.aclk(aclk),
	.enable(rready & (cpustate == FETCH)),
	.instruction(din),
	.instrOneHotOut(instrOneHotOut),
	.isrecordingform(isrecordingform),
	.aluop(aluop),
	.bluop(bluop),
	.func3(func3),
	.func7(func7),
	.func12(func12),
	.rs1(rs1),
	.rs2(rs2),
	.rs3(rs3),
	.rd(rd),
	.csrindex(csrindex),
	.immed(immed),
	.selectimmedasrval2(immsel) );

// Integer register file
logic rwe = 1'b0;
wire [31:0] rval1;
wire [31:0] rval2;
logic [31:0] rdin;

registerfile REGS(
	.clock(aclk),
	.rs1(rs1),
	.rs2(rs2),
	.rd(rd),
	.wren(rwe),
	.din(rdin),
	.rval1(rval1),
	.rval2(rval2) );

`ifdef ENABLEFPU
// Floating point register file
logic frwe = 1'b0;
wire [31:0] frval1;
wire [31:0] frval2;
wire [31:0] frval3;
logic [31:0] frdin;

floatregisterfile FREGS(
	.clock(aclk),
	.rs1(rs1),
	.rs2(rs2),
	.rs3(rs3),
	.rd(rd),
	.wren(frwe),
	.datain(frdin),
	.rval1(frval1),
	.rval2(frval2),
	.rval3(frval3) );
`endif

// CSR shadows
wire [31:0] mip;	// Interrupt pending
wire [31:0] mie;	// Interrupt enable
wire [31:0] mtvec;	// Interrupt handler vector
wire [31:0] mepc;	// Interrupt return address
wire [31:0] mtval;	// Interrupt time value
wire [31:0] mcause;	// Interrupt cause bits
wire [63:0] tcmp;	// Time compare

// CSR access
logic csrwe = 1'b0;
logic [31:0] csrdin = 0;
logic [31:0] csrprevval;
logic csrwenforce = 1'b0;
logic [4:0] csrenforceindex = 0;
wire [31:0] csrdout;

csrregisterfile #(.HARTID(HARTID)) CSRREGS (
	.clock(aclk),
	.wallclocktime(wallclocktime),
	.cpuclocktime(cpuclocktime),
	.retired(retired),
	.tcmp(tcmp),
	.mie(mie),
	.mip(mip),
	.mtvec(mtvec),
	.mepc(mepc),
	.csrindex(csrwenforce ? csrenforceindex : csrindex),
	.we(csrwe),
	.dout(csrdout),
	.din(csrdin) );

// BLU
wire branchout;

branchdecision BLU(
	.enable(rready & (cpustate == FETCH)),
	.aclk(aclk),
	.branchout(branchout),
	.val1(rval1),
	.val2(rval2),
	.bluop(bluop) );

// ALU
wire [31:0] aluout;

arithmeticlogicunit ALU (
	.enable(rready & (cpustate == FETCH)),
	.aclk(aclk),
	.aluout(aluout),
	.val1(rval1),
	.val2(immsel ? immed : rval2),
	.aluop(aluop) );

// MUL/DIV/REM
wire isexecuting = (cpustate==EXECUTE);
wire isexecutingop = isexecuting & instrOneHotOut[`O_H_OP];

wire mulready;
wire mulstart = isexecutingop & (aluop==`ALU_MUL);
wire [31:0] product;
integermultiplier IMULSU(
    .aclk(aclk),
    .aresetn(aresetn),
    .start(mulstart),
    .ready(mulready),
    .func3(func3),
    .multiplicand(rval1),
    .multiplier(rval2),
    .product(product) );

wire divuready;
wire divustart = isexecutingop & (aluop==`ALU_DIV | aluop==`ALU_REM);
wire [31:0] quotientu, remainderu;
integerdividerunsigned IDIVU (
	.aclk(aclk),
	.aresetn(aresetn),
	.start(divustart),
	.ready(divuready),
	.dividend(rval1),
	.divisor(rval2),
	.quotient(quotientu),
	.remainder(remainderu) );

wire divready;
wire divstart = isexecutingop & (aluop==`ALU_DIV | aluop==`ALU_REM);
wire [31:0] quotient, remainder;
integerdividersigned IDIVS (
	.aclk(aclk),
	.aresetn(aresetn),
	.start(divstart),
	.ready(divready),
	.dividend(rval1),
	.divisor(rval2),
	.quotient(quotient),
	.remainder(remainder) );

wire imathstart = divstart | divustart | mulstart;
wire imathready = divready | divuready | mulready;

`ifdef ENABLEFPU
// FPU
logic fmaddstrobe = 1'b0;
logic fmsubstrobe = 1'b0;
logic fnmsubstrobe = 1'b0;
logic fnmaddstrobe = 1'b0;
logic faddstrobe = 1'b0;
logic fsubstrobe = 1'b0;
logic fmulstrobe = 1'b0;
logic fdivstrobe = 1'b0;
logic fi2fstrobe = 1'b0;
logic fui2fstrobe = 1'b0;
logic ff2istrobe = 1'b0;
logic ff2uistrobe = 1'b0;
logic fsqrtstrobe = 1'b0;
logic feqstrobe = 1'b0;
logic fltstrobe = 1'b0;
logic flestrobe = 1'b0;

wire FPUResultValid;
wire [31:0] FPUResult;

floatingpointunit FPU(
	.clock(aclk),
	.resetn(aresetn),

	// Inputs
	.frval1((fi2fstrobe | fui2fstrobe) ? rval1 : frval1),
	.frval2(frval2),
	.frval3(frval3),

	// Operation select strobe
	.fmaddstrobe(fmaddstrobe),
	.fmsubstrobe(fmsubstrobe),
	.fnmsubstrobe(fnmsubstrobe),
	.fnmaddstrobe(fnmaddstrobe),
	.faddstrobe(faddstrobe),
	.fsubstrobe(fsubstrobe),
	.fmulstrobe(fmulstrobe),
	.fdivstrobe(fdivstrobe),
	.fi2fstrobe(fi2fstrobe),
	.fui2fstrobe(fui2fstrobe),
	.ff2istrobe(ff2istrobe),
	.ff2uistrobe(ff2uistrobe),
	.fsqrtstrobe(fsqrtstrobe),
	.feqstrobe(feqstrobe),
	.fltstrobe(fltstrobe),
	.flestrobe(flestrobe),

	// Output
	.resultvalid(FPUResultValid),
	.result(FPUResult) );
`endif // ENABLEFPU

// Interrupt logic
logic illegalinstruction = 1'b0;
logic [31:0] rwaddress = 32'd0;
logic [31:0] adjacentPC = 32'd0;

// Retired instruction counter
always @(posedge aclk) begin
	retired <= retired + (cpustate==RETIRE ? 64'd1 : 64'd0);
end

// Timer trigger
wire trq = (wallclocktime >= tcmp) ? 1'b1 : 1'b0;

// Any external wire event triggers our interrupt service if corresponding enable bit is high
wire hwint = (|irq) && mie[11];	// MEIE - machine external interrupt enable
// Timer interrupts
wire timerint = trq && mie[7];	// MTIE - timer interrupt enable
// Software interrupts
//logic sint = 1'b0;
//wire swint = sint && mie[3];	// MSIE - machine software interrupt enable

always @(posedge aclk) begin
	if (~aresetn) begin
		cpustate <= INIT;
	end else begin

		wstrb <= 4'h0;
	 	ren <= 1'b0;
	 	rwe <= 1'b0;
	 	csrwe <= 1'b0;
	 	csrwenforce <= 1'b0;
	 	dcacheop <= 3'b000;

`ifdef ENABLEFPU
	 	frwe <= 1'b0;
		fmaddstrobe <= 1'b0;
		fmsubstrobe <= 1'b0;
		fnmsubstrobe <= 1'b0;
		fnmaddstrobe <= 1'b0;
		faddstrobe <= 1'b0;
		fsubstrobe <= 1'b0;
		fmulstrobe <= 1'b0;
		fdivstrobe <= 1'b0;
		fi2fstrobe <= 1'b0;
		fui2fstrobe <= 1'b0;
		ff2istrobe <= 1'b0;
		ff2uistrobe <= 1'b0;
		fsqrtstrobe <= 1'b0;
		feqstrobe <= 1'b0;
		fltstrobe <= 1'b0;
		flestrobe <= 1'b0;
`endif // ENABLEFPU

		case (cpustate)
			INIT: begin
				addr <= RESETVECTOR;
				PC <= RESETVECTOR;
				nextPC <= RESETVECTOR;
				cpustate <= RETIRE;
			end

			RETIRE: begin
				// Handle a pending interrupt if we're not already handling ANY interrupt (i.e. can't interrupt out of an interrupt)
				if ( (illegalinstruction || ecall || ebreak || hwint || timerint) && ~(|mip)) begin
					csrwe <= 1'b1;
					csrwenforce <= 1'b1;
					// Save PC of next instruction that would have executed before IRQ
					// For EBREAK, use current PC so that debugger can stop where it wants to
					csrdin <= ebreak ? PC : nextPC;
					csrenforceindex <= `CSR_MEPC;
					// Branch to the ISR instead
					// For EBREAK, we have to do special debugger processing in the ISR
					PC <= mtvec;
					// Need to set up a few CSRs before we can actually trigger the FETCH
					cpustate <= INTERRUPTSETUP;
				end else begin
					// Regular instruction fetch
					PC <= nextPC;
					addr <= nextPC;
					cpustate <= FETCH;
					ifetch <= 1'b1; // This read is to use I$, hold high until read is complete
					ren <= 1'b1;
				end
			end

			INTERRUPTSETUP: begin
				// Write machine interrupt pending bits
				csrwe <= 1'b1;
				csrwenforce <= 1'b1;
				csrenforceindex <= `CSR_MIP;
				// NOTE: Interrupt service ordering according to privileged isa is: mei/msi/mti/sei/ssi/sti
				if (hwint) begin
					// MEI, external hardware interrupt
					csrdin <= {mip[31:12], 1'b1, mip[10:0]};
				end else if (illegalinstruction || ecall || ebreak) begin
					// MSI, exception
					csrdin <= {mip[31:4], 1'b1, mip[2:0]};
				end else if (timerint) begin
					// MTI, timer interrupt
					csrdin <= {mip[31:8], 1'b1, mip[6:0]};
				end
				cpustate <= INTERRUPTVALUE;
			end

			INTERRUPTVALUE: begin
				// Write the interrupt value bits
				csrwe <= 1'b1;
				csrwenforce <= 1'b1;
				csrenforceindex <= `CSR_MTVAL;
				if (hwint) begin
					// MEI, external hardware interrupt
					csrdin  <= {27'd0, irq};	// Device IRQ bits, all those are pending (bit 4 is HART wake up)
				end else if (illegalinstruction || ecall || ebreak) begin
					// MSI, exception
					csrdin <= 32'd0;			// TODO: write offending instruction here for illlegalinstruction
				end else if (timerint) begin
					// MTI, timer interrupt
					csrdin  <= 32'd0;			// TODO: timer interrupt doesn't need much data, but we reserve it for future
				end
				cpustate <= INTERRUPTCAUSE;
			end

			INTERRUPTCAUSE: begin
				// Write the interrupt/exception cause
				csrwe <= 1'b1;
				csrwenforce <= 1'b1;
				csrenforceindex <= `CSR_MCAUSE;
				if (hwint) begin
					// MEI, external hardware interrupt
					csrdin  <= 32'h8000000b; // [31]=1'b1(interrupt), 11->h/w
				end else if (illegalinstruction || ecall || ebreak) begin
					// MSI, exception
					// See: https://www.five-embeddev.com/riscv-isa-manual/latest/machine.html#sec:mcause
					// [31]=1'b0(exception)
					// 0xb->ecall
					// 0x3->ebreak
					// 0x2->illegal instruction
					csrdin  <= ecall ? 32'h0000000b : (ebreak ? 32'h00000003 : 32'h00000002);
				end else if (timerint) begin
					// MTI, timer interrupt
					csrdin  <= 32'h80000007; // [31]=1'b1(interrupt), 7->timer
				end
				// We can now resume reading the first instruction of the ISR
				// Return address is saved in MEPC, so we can go back once done
				addr <= mtvec;
				ifetch <= 1'b1;
				ren <= 1'b1;
				cpustate <= FETCH;
			end

			FETCH: begin
				adjacentPC <= PC + 32'd4;
				ifetch <= ~rready;
				rwaddress <= rval1 + immed;
				csrprevval <= csrdout;
				cpustate <= rready ? EXECUTE : FETCH;
			end

			EXECUTE: begin
				cpustate <= RETIRE;
				rwe <= imathstart ? 1'b0 : isrecordingform;
				illegalinstruction <= 1'b0; // No longer an illegal instruction
				ecall <= 1'b0; // No longer in ECALL
				nextPC <= adjacentPC;
				case (1'b1)
`ifdef ENABLEFPU
					instrOneHotOut[`O_H_FLOAT_MADD],
					instrOneHotOut[`O_H_FLOAT_MSUB],
					instrOneHotOut[`O_H_FLOAT_NMSUB],
					instrOneHotOut[`O_H_FLOAT_NMADD]: begin
						// Fused FPU operations
						fmaddstrobe <= instrOneHotOut[`O_H_FLOAT_MADD];
						fmsubstrobe <= instrOneHotOut[`O_H_FLOAT_MSUB];
						fnmsubstrobe <= instrOneHotOut[`O_H_FLOAT_NMSUB];
						fnmaddstrobe <= instrOneHotOut[`O_H_FLOAT_NMADD];
						cpustate <= CPUFMSTALL;
					end
					instrOneHotOut[`O_H_FLOAT_OP]: begin
						cpustate <= CPUFPUOP;
					end
`endif // ENABLEFPU
					instrOneHotOut[`O_H_AUIPC]: begin
						rdin <= PC + immed;
					end
					instrOneHotOut[`O_H_LUI]: begin
						rdin <= immed;
					end
					instrOneHotOut[`O_H_JAL]: begin
						rdin <= adjacentPC;
						nextPC <= PC + immed;
					end
					instrOneHotOut[`O_H_JALR]: begin
						rdin <= adjacentPC;
						nextPC <= rwaddress;
					end
					instrOneHotOut[`O_H_BRANCH]: begin
						nextPC <= branchout == 1'b1 ? (PC + immed) : adjacentPC;
					end
					instrOneHotOut[`O_H_OP], instrOneHotOut[`O_H_OP_IMM]: begin
						cpustate <= imathstart ? IMATHWAIT : RETIRE;
						rdin <= aluout;
					end
`ifdef ENABLEFPU
					instrOneHotOut[`O_H_FLOAT_LDW],
`endif // ENABLEFPU
					instrOneHotOut[`O_H_LOAD]: begin
						addr <= rwaddress;
						ren <= 1'b1; // This read is to use D$ (i.e. ifetch == 0 here)
						cpustate <= LOADWAIT;
					end
`ifdef ENABLEFPU
					instrOneHotOut[`O_H_FLOAT_STW],
`endif // ENABLEFPU
					instrOneHotOut[`O_H_STORE]: begin
						case (func3)
							3'b000: begin // BYTE
								dout <= {rval2[7:0], rval2[7:0], rval2[7:0], rval2[7:0]};
								case (rwaddress[1:0])
									2'b11: begin wstrb <= 4'b1000; end
									2'b10: begin wstrb <= 4'b0100; end
									2'b01: begin wstrb <= 4'b0010; end
									default/*2'b00*/: begin wstrb <= 4'b0001; end
								endcase
							end
							3'b001: begin // WORD
								dout <= {rval2[15:0], rval2[15:0]};
								case (rwaddress[1])
									1'b1: begin wstrb <= 4'b1100; end
									default/*1'b0*/: begin wstrb <= 4'b0011; end
								endcase
							end
							default: begin // DWORD
`ifdef ENABLEFPU
								dout <= instrOneHotOut[`O_H_FLOAT_STW] ? frval2 : rval2;
`else
								dout <= rval2;
`endif // ENABLEFPU
								wstrb <= 4'b1111;
							end
						endcase
						addr <= rwaddress;
						cpustate <= STOREWAIT;
					end
					instrOneHotOut[`O_H_FENCE]: begin
						// f12            rs1   f3  rd    OPCODE
						// 0000_pred_succ_00000_000_00000_0001111 -> FENCE (32'h0ff0000f)
						//if (instruction == 32'h0ff0000f) // FENCE
						//	fence <= 1'b1;

						// f12         rs1   f3  rd    OPCODE
						//000000000000_00000_001_00000_0001111 -> FENCE.I (32'h0000100F) Flush I$
						if ({func12, func3} == {12'd0, 3'b001}) begin
							dcacheop <= 3'b101;		// I$, do not write back, mark not dirty
							cpustate <= LOADWAIT;	// HINT: Since rd==0, nothing will actually happen to register file
						end	else
							dcacheop <= 3'b000;		// noop
					end
					instrOneHotOut[`O_H_SYSTEM]: begin
						// Store previous value of CSR in target register
						rdin <= csrprevval;
						rwe <= (func3 == 3'b000) ? 1'b0 : 1'b1; // No register write back for non-CSR sys ops
						csrwe <= 1'b1;
						case (func3)
							default/*3'b000*/: begin
								case (func12)
									12'b1111110_00000: begin	// CFLUSH.D.L1 (32'hFC000073) Writeback dirty D$ lines and invalidate tags
										// 1111110_00000_0000000000000_1110011
										dcacheop <= 3'b011;		// D$, write back, mark not dirty
										ren <= 1'b1;
										addr <= rval1;
										cpustate <= LOADWAIT; // HINT: Since rd==0, nothing will actually happen to register file
									end
									12'b1111110_00010: begin	// CDISCARD.D.L1 (32'hFC200073) Invalidate D$
										// 1111110_00010_0000000000000_1110011
										dcacheop <= 3'b001;		// D$, do not write back, mark not dirty
										ren <= 1'b1;
										addr <= rval1;
										cpustate <= LOADWAIT; // HINT: Since rd==0, nothing will actually happen to register file
									end
									12'b0000000_00000: begin	// ECALL - sys call
										ecall <= mie[3]; // MSIE
										// Ignore store
										csrwe <= 1'b0;
									end
									12'b0000000_00001: begin	// EBREAK - software breakpoint
										ebreak <= mie[3];		// MSIE but jump into debugger environment TODO: Could this be a hardcoded trap address, i.e. 0x0... or 0x2... ?
										// Ignore store
										csrwe <= 1'b0;
									end
									12'b0001000_00101: begin	// WFI - wait for interrupt
										cpustate <= WFI;
										// Ignore store
										csrwe <= 1'b0;
									end
									default/*12'b0011000_00010*/: begin	// MRET - return from interrupt
										// Ignore whatever random CSR might be selected, and use ours
										csrwenforce <= 1'b1;
										csrenforceindex <= `CSR_MIP;
										// Return to interrupt point
										nextPC <= mepc;
										// Clear interrupt pending bit with correct priority
										if (mip[11])
											csrdin <= {mip[31:12], 1'b0, mip[10:0]};
										else if (mip[3])
											csrdin <= {mip[31:4], 1'b0, mip[2:0]};
										else if (mip[7])
											csrdin <= {mip[31:8], 1'b0, mip[6:0]};
									end
								endcase
							end
							3'b100: begin // Unknown
								csrdin <= csrprevval;
							end
							3'b001: begin
								csrdin <= rval1;
							end
							3'b101: begin
								csrdin <= immed;
							end
							3'b010: begin
								csrdin <= csrprevval | rval1;
							end
							3'b110: begin
								csrdin <= csrprevval | immed;
							end
							3'b011: begin
								csrdin <= csrprevval & (~rval1);
							end
							3'b111: begin
								csrdin <= csrprevval & (~immed);
							end
						endcase
					end
					default: begin
						// Illegal instruction triggers only
						// if machine software interrupts are enabled
						illegalinstruction <= mie[3];
					end
				endcase
			end

			STOREWAIT: begin
				cpustate <= wready ? RETIRE : STOREWAIT;
			end

			LOADWAIT: begin
				// Read complete, handle register write-back
				rwe <= rready;
				case (func3)
					3'b000: begin // BYTE with sign extension
						case (rwaddress[1:0])
							2'b11: begin rdin <= {{24{din[31]}}, din[31:24]}; end
							2'b10: begin rdin <= {{24{din[23]}}, din[23:16]}; end
							2'b01: begin rdin <= {{24{din[15]}}, din[15:8]}; end
							default/*2'b00*/: begin rdin <= {{24{din[7]}}, din[7:0]}; end
						endcase
					end
					3'b001: begin // HALF with sign extension
						case (rwaddress[1])
							1'b1: begin rdin <= {{16{din[31]}}, din[31:16]}; end
							default/*1'b0*/: begin rdin <= {{16{din[15]}}, din[15:0]}; end
						endcase
					end
					3'b100: begin // BYTE with zero extension
						case (rwaddress[1:0])
							2'b11: begin rdin <= {24'd0, din[31:24]}; end
							2'b10: begin rdin <= {24'd0, din[23:16]}; end
							2'b01: begin rdin <= {24'd0, din[15:8]}; end
							default/*2'b00*/: begin rdin <= {24'd0, din[7:0]}; end
						endcase
					end
					3'b101: begin // HALF with zero extension
						case (rwaddress[1])
							1'b1: begin rdin <= {16'd0, din[31:16]}; end
							default/*1'b0*/: begin rdin <= {16'd0, din[15:0]}; end
						endcase
					end
					default/*3'b010*/: begin // WORD
`ifdef ENABLEFPU
						if (instrOneHotOut[`O_H_FLOAT_LDW]) begin
							frdin <= din[31:0];
							frwe <= rready;
							rwe <= 1'b0; // Do not overwrite integer registers in this case
						end else
`endif // ENABLEFPU
							rdin <= din[31:0];
					end
				endcase
				cpustate <= rready ? RETIRE : LOADWAIT;
			end

`ifdef ENABLEFPU
			CPUFMSTALL: begin
				if (FPUResultValid) begin
					frwe <= 1'b1;
					frdin <= FPUResult;
					cpustate <= RETIRE;
				end else begin
					cpustate <= CPUFMSTALL; // Stall further for fused float
				end
			end

			CPUFPUOP: begin
				case (func7)
					`F7_FSGNJ: begin
						frwe <= 1'b1;
						case(func3)
							3'b000: begin // FSGNJ
								frdin <= {frval2[31], frval1[30:0]}; 
							end
							3'b001: begin  // FSGNJN
								frdin <= {~frval2[31], frval1[30:0]};
							end
							3'b010: begin  // FSGNJX
								frdin <= {frval1[31]^frval2[31], frval1[30:0]};
							end
						endcase
						cpustate <= RETIRE;
					end
					`F7_FMVXW: begin
						rwe <= 1'b1;
						if (func3 == 3'b000) // FMVXW
							rdin <= frval1;
						else // FCLASS
							rdin <= 32'd0; // TODO: classify the float
						cpustate <= RETIRE;
					end
					`F7_FMVWX: begin
						frwe <= 1'b1;
						frdin <= rval1;
						cpustate <= RETIRE;
					end
					`F7_FADD: begin
						faddstrobe <= 1'b1;
						cpustate <= CPUFSTALL;
					end
					`F7_FSUB: begin
						fsubstrobe <= 1'b1;
						cpustate <= CPUFSTALL;
					end	
					`F7_FMUL: begin
						fmulstrobe <= 1'b1;
						cpustate <= CPUFSTALL;
					end	
					`F7_FDIV: begin
						fdivstrobe <= 1'b1;
						cpustate <= CPUFSTALL;
					end
					`F7_FCVTSW: begin	
						fi2fstrobe <= (rs2==5'b00000) ? 1'b1:1'b0; // Signed
						fui2fstrobe <= (rs2==5'b00001) ? 1'b1:1'b0; // Unsigned
						cpustate <= CPUFSTALL;
					end
					`F7_FCVTWS: begin
						ff2istrobe <= (rs2==5'b00000) ? 1'b1:1'b0; // Signed
						ff2uistrobe <= (rs2==5'b00001) ? 1'b1:1'b0; // Unsigned
						cpustate <= CPUFSTALL;
					end
					`F7_FSQRT: begin
						fsqrtstrobe <= 1'b1;
						cpustate <= CPUFSTALL;
					end
					`F7_FEQ: begin
						feqstrobe <= (func3==3'b010) ? 1'b1:1'b0; // FEQ
						fltstrobe <= (func3==3'b001) ? 1'b1:1'b0; // FLT
						flestrobe <= (func3==3'b000) ? 1'b1:1'b0; // FLE
						cpustate <= CPUFSTALL;
					end
					`F7_FMAX: begin
						fltstrobe <= 1'b1; // FLT
						cpustate <= CPUFSTALL;
					end
					default: begin
						cpustate <= RETIRE;
					end
				endcase
			end

			CPUFSTALL: begin
				if (FPUResultValid) begin
					case (func7)
						`F7_FADD, `F7_FSUB, `F7_FMUL, `F7_FDIV, `F7_FSQRT,`F7_FCVTSW: begin
							frwe <= 1'b1;
							frdin <= FPUResult;
						end
						`F7_FCVTWS: begin
							rwe <= 1'b1;
							rdin <= FPUResult;
						end
						`F7_FEQ: begin
							rwe <= 1'b1;
							rdin <= {31'd0, FPUResult[0]};
						end
						`F7_FMIN: begin
							frwe <= 1'b1;
							if (func3==3'b000) // FMIN
								frdin <= FPUResult[0] ? frval1 : frval2;
							else // FMAX
								frdin <= FPUResult[0] ? frval2 : frval1;
						end
					endcase
					cpustate <= RETIRE;
				end else begin
					cpustate <= CPUFSTALL; // Stall further for float op
				end
			end
`endif // ENABLEFPU

			IMATHWAIT: begin
				if (imathready) begin
					rwe <= 1'b1;
					case (aluop)
						`ALU_MUL: begin
							rdin <= product;
						end
						`ALU_DIV: begin
							rdin <= func3==`F3_DIV ? quotient : quotientu;
						end
						`ALU_REM: begin
							rdin <= func3==`F3_REM ? remainder : remainderu;
						end
						default: begin
							rdin <= 32'd0;
						end
					endcase
					cpustate <= RETIRE;
				end else begin
					cpustate <= IMATHWAIT;
				end
			end
			
			WFI: begin
				// Everything except illegalinstruction and swint wakes up this HART
				if ( hwint || timerint ) begin
					cpustate <= RETIRE;
				end else begin
					cpustate <= WFI;
				end
			end

		endcase

	end
end
